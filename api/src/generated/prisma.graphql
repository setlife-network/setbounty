# source: http://localhost:4466
# timestamp: Wed Oct 03 2018 16:46:01 GMT+0200 (Central European Summer Time)

type AggregateBounty {
  count: Int!
}

type AggregateIssue {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Bounty implements Node {
  id: ID!
  createdAt: DateTime!
  amount: Int!
  postedBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type BountyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BountyEdge]!
  aggregate: AggregateBounty!
}

input BountyCreateInput {
  amount: Int!
  postedBy: UserCreateOneInput
}

input BountyCreateOneInput {
  create: BountyCreateInput
  connect: BountyWhereUniqueInput
}

"""An edge in a connection."""
type BountyEdge {
  """The item at the end of the edge."""
  node: Bounty!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BountyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  amount_ASC
  amount_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BountyPreviousValues {
  id: ID!
  createdAt: DateTime!
  amount: Int!
}

type BountySubscriptionPayload {
  mutation: MutationType!
  node: Bounty
  updatedFields: [String!]
  previousValues: BountyPreviousValues
}

input BountySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BountySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BountySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BountySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BountyWhereInput
}

input BountyUpdateDataInput {
  amount: Int
  postedBy: UserUpdateOneInput
}

input BountyUpdateInput {
  amount: Int
  postedBy: UserUpdateOneInput
}

input BountyUpdateOneInput {
  create: BountyCreateInput
  connect: BountyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BountyUpdateDataInput
  upsert: BountyUpsertNestedInput
}

input BountyUpsertNestedInput {
  update: BountyUpdateDataInput!
  create: BountyCreateInput!
}

input BountyWhereInput {
  """Logical AND on all given filters."""
  AND: [BountyWhereInput!]

  """Logical OR on all given filters."""
  OR: [BountyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BountyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  postedBy: UserWhereInput
}

input BountyWhereUniqueInput {
  id: ID
}

scalar DateTime

type Issue implements Node {
  id: ID!
  createdAt: DateTime!
  number: Int!
  closed: Boolean!
  locked: Boolean!
  bounty(where: BountyWhereInput): Bounty
}

"""A connection to a list of items."""
type IssueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IssueEdge]!
  aggregate: AggregateIssue!
}

input IssueCreateInput {
  number: Int!
  closed: Boolean!
  locked: Boolean!
  bounty: BountyCreateOneInput
}

"""An edge in a connection."""
type IssueEdge {
  """The item at the end of the edge."""
  node: Issue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IssueOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  number_ASC
  number_DESC
  closed_ASC
  closed_DESC
  locked_ASC
  locked_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IssuePreviousValues {
  id: ID!
  createdAt: DateTime!
  number: Int!
  closed: Boolean!
  locked: Boolean!
}

type IssueSubscriptionPayload {
  mutation: MutationType!
  node: Issue
  updatedFields: [String!]
  previousValues: IssuePreviousValues
}

input IssueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IssueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IssueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IssueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IssueWhereInput
}

input IssueUpdateInput {
  number: Int
  closed: Boolean
  locked: Boolean
  bounty: BountyUpdateOneInput
}

input IssueWhereInput {
  """Logical AND on all given filters."""
  AND: [IssueWhereInput!]

  """Logical OR on all given filters."""
  OR: [IssueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IssueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  closed: Boolean

  """All values that are not equal to given value."""
  closed_not: Boolean
  locked: Boolean

  """All values that are not equal to given value."""
  locked_not: Boolean
  bounty: BountyWhereInput
}

input IssueWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createIssue(data: IssueCreateInput!): Issue!
  createUser(data: UserCreateInput!): User!
  createBounty(data: BountyCreateInput!): Bounty!
  updateIssue(data: IssueUpdateInput!, where: IssueWhereUniqueInput!): Issue
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateBounty(data: BountyUpdateInput!, where: BountyWhereUniqueInput!): Bounty
  deleteIssue(where: IssueWhereUniqueInput!): Issue
  deleteUser(where: UserWhereUniqueInput!): User
  deleteBounty(where: BountyWhereUniqueInput!): Bounty
  upsertIssue(where: IssueWhereUniqueInput!, create: IssueCreateInput!, update: IssueUpdateInput!): Issue!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertBounty(where: BountyWhereUniqueInput!, create: BountyCreateInput!, update: BountyUpdateInput!): Bounty!
  updateManyIssues(data: IssueUpdateInput!, where: IssueWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyBounties(data: BountyUpdateInput!, where: BountyWhereInput): BatchPayload!
  deleteManyIssues(where: IssueWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyBounties(where: BountyWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  issues(where: IssueWhereInput, orderBy: IssueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Issue]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  bounties(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bounty]!
  issue(where: IssueWhereUniqueInput!): Issue
  user(where: UserWhereUniqueInput!): User
  bounty(where: BountyWhereUniqueInput!): Bounty
  issuesConnection(where: IssueWhereInput, orderBy: IssueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IssueConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  bountiesConnection(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BountyConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  issue(where: IssueSubscriptionWhereInput): IssueSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  bounty(where: BountySubscriptionWhereInput): BountySubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  email: String
}

input UserUpdateInput {
  username: String
  email: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
