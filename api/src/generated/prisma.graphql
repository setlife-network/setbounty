# source: http://localhost:4466
# timestamp: Thu Dec 06 2018 20:33:08 GMT+0000 (Greenwich Mean Time)

type AggregateBounty {
  count: Int!
}

type AggregateClaim {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Bounty implements Node {
  id: ID!
  createdAt: DateTime!
  createdBy(where: UserWhereInput): User!
  expirationDate: DateTime!
  amount: Int!
  issueURL: String!
  issueNumber: Int!
  repository: String!
  state: BountyState!
  savedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  claim(where: ClaimWhereInput): Claim
}

"""A connection to a list of items."""
type BountyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BountyEdge]!
  aggregate: AggregateBounty!
}

input BountyCreateInput {
  expirationDate: DateTime!
  amount: Int!
  issueURL: String!
  issueNumber: Int!
  repository: String!
  state: BountyState
  createdBy: UserCreateOneWithoutCreatedBountiesInput!
  savedBy: UserCreateManyWithoutSavedBountiesInput
  claim: ClaimCreateOneWithoutBountiesInput
}

input BountyCreateManyWithoutClaimInput {
  create: [BountyCreateWithoutClaimInput!]
  connect: [BountyWhereUniqueInput!]
}

input BountyCreateManyWithoutCreatedByInput {
  create: [BountyCreateWithoutCreatedByInput!]
  connect: [BountyWhereUniqueInput!]
}

input BountyCreateManyWithoutSavedByInput {
  create: [BountyCreateWithoutSavedByInput!]
  connect: [BountyWhereUniqueInput!]
}

input BountyCreateWithoutClaimInput {
  expirationDate: DateTime!
  amount: Int!
  issueURL: String!
  issueNumber: Int!
  repository: String!
  state: BountyState
  createdBy: UserCreateOneWithoutCreatedBountiesInput!
  savedBy: UserCreateManyWithoutSavedBountiesInput
}

input BountyCreateWithoutCreatedByInput {
  expirationDate: DateTime!
  amount: Int!
  issueURL: String!
  issueNumber: Int!
  repository: String!
  state: BountyState
  savedBy: UserCreateManyWithoutSavedBountiesInput
  claim: ClaimCreateOneWithoutBountiesInput
}

input BountyCreateWithoutSavedByInput {
  expirationDate: DateTime!
  amount: Int!
  issueURL: String!
  issueNumber: Int!
  repository: String!
  state: BountyState
  createdBy: UserCreateOneWithoutCreatedBountiesInput!
  claim: ClaimCreateOneWithoutBountiesInput
}

"""An edge in a connection."""
type BountyEdge {
  """The item at the end of the edge."""
  node: Bounty!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BountyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  expirationDate_ASC
  expirationDate_DESC
  amount_ASC
  amount_DESC
  issueURL_ASC
  issueURL_DESC
  issueNumber_ASC
  issueNumber_DESC
  repository_ASC
  repository_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BountyPreviousValues {
  id: ID!
  createdAt: DateTime!
  expirationDate: DateTime!
  amount: Int!
  issueURL: String!
  issueNumber: Int!
  repository: String!
  state: BountyState!
}

enum BountyState {
  OPEN
  PAUSED
  CLAIMED
  EXPIRED
}

type BountySubscriptionPayload {
  mutation: MutationType!
  node: Bounty
  updatedFields: [String!]
  previousValues: BountyPreviousValues
}

input BountySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BountySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BountySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BountySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BountyWhereInput
}

input BountyUpdateInput {
  expirationDate: DateTime
  amount: Int
  issueURL: String
  issueNumber: Int
  repository: String
  state: BountyState
  createdBy: UserUpdateOneRequiredWithoutCreatedBountiesInput
  savedBy: UserUpdateManyWithoutSavedBountiesInput
  claim: ClaimUpdateOneWithoutBountiesInput
}

input BountyUpdateManyWithoutClaimInput {
  create: [BountyCreateWithoutClaimInput!]
  connect: [BountyWhereUniqueInput!]
  disconnect: [BountyWhereUniqueInput!]
  delete: [BountyWhereUniqueInput!]
  update: [BountyUpdateWithWhereUniqueWithoutClaimInput!]
  upsert: [BountyUpsertWithWhereUniqueWithoutClaimInput!]
}

input BountyUpdateManyWithoutCreatedByInput {
  create: [BountyCreateWithoutCreatedByInput!]
  connect: [BountyWhereUniqueInput!]
  disconnect: [BountyWhereUniqueInput!]
  delete: [BountyWhereUniqueInput!]
  update: [BountyUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [BountyUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input BountyUpdateManyWithoutSavedByInput {
  create: [BountyCreateWithoutSavedByInput!]
  connect: [BountyWhereUniqueInput!]
  disconnect: [BountyWhereUniqueInput!]
  delete: [BountyWhereUniqueInput!]
  update: [BountyUpdateWithWhereUniqueWithoutSavedByInput!]
  upsert: [BountyUpsertWithWhereUniqueWithoutSavedByInput!]
}

input BountyUpdateWithoutClaimDataInput {
  expirationDate: DateTime
  amount: Int
  issueURL: String
  issueNumber: Int
  repository: String
  state: BountyState
  createdBy: UserUpdateOneRequiredWithoutCreatedBountiesInput
  savedBy: UserUpdateManyWithoutSavedBountiesInput
}

input BountyUpdateWithoutCreatedByDataInput {
  expirationDate: DateTime
  amount: Int
  issueURL: String
  issueNumber: Int
  repository: String
  state: BountyState
  savedBy: UserUpdateManyWithoutSavedBountiesInput
  claim: ClaimUpdateOneWithoutBountiesInput
}

input BountyUpdateWithoutSavedByDataInput {
  expirationDate: DateTime
  amount: Int
  issueURL: String
  issueNumber: Int
  repository: String
  state: BountyState
  createdBy: UserUpdateOneRequiredWithoutCreatedBountiesInput
  claim: ClaimUpdateOneWithoutBountiesInput
}

input BountyUpdateWithWhereUniqueWithoutClaimInput {
  where: BountyWhereUniqueInput!
  data: BountyUpdateWithoutClaimDataInput!
}

input BountyUpdateWithWhereUniqueWithoutCreatedByInput {
  where: BountyWhereUniqueInput!
  data: BountyUpdateWithoutCreatedByDataInput!
}

input BountyUpdateWithWhereUniqueWithoutSavedByInput {
  where: BountyWhereUniqueInput!
  data: BountyUpdateWithoutSavedByDataInput!
}

input BountyUpsertWithWhereUniqueWithoutClaimInput {
  where: BountyWhereUniqueInput!
  update: BountyUpdateWithoutClaimDataInput!
  create: BountyCreateWithoutClaimInput!
}

input BountyUpsertWithWhereUniqueWithoutCreatedByInput {
  where: BountyWhereUniqueInput!
  update: BountyUpdateWithoutCreatedByDataInput!
  create: BountyCreateWithoutCreatedByInput!
}

input BountyUpsertWithWhereUniqueWithoutSavedByInput {
  where: BountyWhereUniqueInput!
  update: BountyUpdateWithoutSavedByDataInput!
  create: BountyCreateWithoutSavedByInput!
}

input BountyWhereInput {
  """Logical AND on all given filters."""
  AND: [BountyWhereInput!]

  """Logical OR on all given filters."""
  OR: [BountyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BountyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  expirationDate: DateTime

  """All values that are not equal to given value."""
  expirationDate_not: DateTime

  """All values that are contained in given list."""
  expirationDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expirationDate_not_in: [DateTime!]

  """All values less than the given value."""
  expirationDate_lt: DateTime

  """All values less than or equal the given value."""
  expirationDate_lte: DateTime

  """All values greater than the given value."""
  expirationDate_gt: DateTime

  """All values greater than or equal the given value."""
  expirationDate_gte: DateTime
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  issueURL: String

  """All values that are not equal to given value."""
  issueURL_not: String

  """All values that are contained in given list."""
  issueURL_in: [String!]

  """All values that are not contained in given list."""
  issueURL_not_in: [String!]

  """All values less than the given value."""
  issueURL_lt: String

  """All values less than or equal the given value."""
  issueURL_lte: String

  """All values greater than the given value."""
  issueURL_gt: String

  """All values greater than or equal the given value."""
  issueURL_gte: String

  """All values containing the given string."""
  issueURL_contains: String

  """All values not containing the given string."""
  issueURL_not_contains: String

  """All values starting with the given string."""
  issueURL_starts_with: String

  """All values not starting with the given string."""
  issueURL_not_starts_with: String

  """All values ending with the given string."""
  issueURL_ends_with: String

  """All values not ending with the given string."""
  issueURL_not_ends_with: String
  issueNumber: Int

  """All values that are not equal to given value."""
  issueNumber_not: Int

  """All values that are contained in given list."""
  issueNumber_in: [Int!]

  """All values that are not contained in given list."""
  issueNumber_not_in: [Int!]

  """All values less than the given value."""
  issueNumber_lt: Int

  """All values less than or equal the given value."""
  issueNumber_lte: Int

  """All values greater than the given value."""
  issueNumber_gt: Int

  """All values greater than or equal the given value."""
  issueNumber_gte: Int
  repository: String

  """All values that are not equal to given value."""
  repository_not: String

  """All values that are contained in given list."""
  repository_in: [String!]

  """All values that are not contained in given list."""
  repository_not_in: [String!]

  """All values less than the given value."""
  repository_lt: String

  """All values less than or equal the given value."""
  repository_lte: String

  """All values greater than the given value."""
  repository_gt: String

  """All values greater than or equal the given value."""
  repository_gte: String

  """All values containing the given string."""
  repository_contains: String

  """All values not containing the given string."""
  repository_not_contains: String

  """All values starting with the given string."""
  repository_starts_with: String

  """All values not starting with the given string."""
  repository_not_starts_with: String

  """All values ending with the given string."""
  repository_ends_with: String

  """All values not ending with the given string."""
  repository_not_ends_with: String
  state: BountyState

  """All values that are not equal to given value."""
  state_not: BountyState

  """All values that are contained in given list."""
  state_in: [BountyState!]

  """All values that are not contained in given list."""
  state_not_in: [BountyState!]
  createdBy: UserWhereInput
  savedBy_every: UserWhereInput
  savedBy_some: UserWhereInput
  savedBy_none: UserWhereInput
  claim: ClaimWhereInput
}

input BountyWhereUniqueInput {
  id: ID
}

type Claim implements Node {
  id: ID!
  createdAt: DateTime!
  createdBy(where: UserWhereInput): User!
  issueURL: String!
  pullRequestURL: String!
  state: ClaimState!
  bounties(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bounty!]
}

"""A connection to a list of items."""
type ClaimConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClaimEdge]!
  aggregate: AggregateClaim!
}

input ClaimCreateInput {
  issueURL: String!
  pullRequestURL: String!
  state: ClaimState
  createdBy: UserCreateOneWithoutClaimsInput!
  bounties: BountyCreateManyWithoutClaimInput
}

input ClaimCreateManyWithoutCreatedByInput {
  create: [ClaimCreateWithoutCreatedByInput!]
  connect: [ClaimWhereUniqueInput!]
}

input ClaimCreateOneWithoutBountiesInput {
  create: ClaimCreateWithoutBountiesInput
  connect: ClaimWhereUniqueInput
}

input ClaimCreateWithoutBountiesInput {
  issueURL: String!
  pullRequestURL: String!
  state: ClaimState
  createdBy: UserCreateOneWithoutClaimsInput!
}

input ClaimCreateWithoutCreatedByInput {
  issueURL: String!
  pullRequestURL: String!
  state: ClaimState
  bounties: BountyCreateManyWithoutClaimInput
}

"""An edge in a connection."""
type ClaimEdge {
  """The item at the end of the edge."""
  node: Claim!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClaimOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  issueURL_ASC
  issueURL_DESC
  pullRequestURL_ASC
  pullRequestURL_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ClaimPreviousValues {
  id: ID!
  createdAt: DateTime!
  issueURL: String!
  pullRequestURL: String!
  state: ClaimState!
}

enum ClaimState {
  PENDING
  ACCEPTED
  REJECTED
}

type ClaimSubscriptionPayload {
  mutation: MutationType!
  node: Claim
  updatedFields: [String!]
  previousValues: ClaimPreviousValues
}

input ClaimSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClaimSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClaimSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClaimSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClaimWhereInput
}

input ClaimUpdateInput {
  issueURL: String
  pullRequestURL: String
  state: ClaimState
  createdBy: UserUpdateOneRequiredWithoutClaimsInput
  bounties: BountyUpdateManyWithoutClaimInput
}

input ClaimUpdateManyWithoutCreatedByInput {
  create: [ClaimCreateWithoutCreatedByInput!]
  connect: [ClaimWhereUniqueInput!]
  disconnect: [ClaimWhereUniqueInput!]
  delete: [ClaimWhereUniqueInput!]
  update: [ClaimUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ClaimUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ClaimUpdateOneWithoutBountiesInput {
  create: ClaimCreateWithoutBountiesInput
  connect: ClaimWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ClaimUpdateWithoutBountiesDataInput
  upsert: ClaimUpsertWithoutBountiesInput
}

input ClaimUpdateWithoutBountiesDataInput {
  issueURL: String
  pullRequestURL: String
  state: ClaimState
  createdBy: UserUpdateOneRequiredWithoutClaimsInput
}

input ClaimUpdateWithoutCreatedByDataInput {
  issueURL: String
  pullRequestURL: String
  state: ClaimState
  bounties: BountyUpdateManyWithoutClaimInput
}

input ClaimUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ClaimWhereUniqueInput!
  data: ClaimUpdateWithoutCreatedByDataInput!
}

input ClaimUpsertWithoutBountiesInput {
  update: ClaimUpdateWithoutBountiesDataInput!
  create: ClaimCreateWithoutBountiesInput!
}

input ClaimUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ClaimWhereUniqueInput!
  update: ClaimUpdateWithoutCreatedByDataInput!
  create: ClaimCreateWithoutCreatedByInput!
}

input ClaimWhereInput {
  """Logical AND on all given filters."""
  AND: [ClaimWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClaimWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClaimWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  issueURL: String

  """All values that are not equal to given value."""
  issueURL_not: String

  """All values that are contained in given list."""
  issueURL_in: [String!]

  """All values that are not contained in given list."""
  issueURL_not_in: [String!]

  """All values less than the given value."""
  issueURL_lt: String

  """All values less than or equal the given value."""
  issueURL_lte: String

  """All values greater than the given value."""
  issueURL_gt: String

  """All values greater than or equal the given value."""
  issueURL_gte: String

  """All values containing the given string."""
  issueURL_contains: String

  """All values not containing the given string."""
  issueURL_not_contains: String

  """All values starting with the given string."""
  issueURL_starts_with: String

  """All values not starting with the given string."""
  issueURL_not_starts_with: String

  """All values ending with the given string."""
  issueURL_ends_with: String

  """All values not ending with the given string."""
  issueURL_not_ends_with: String
  pullRequestURL: String

  """All values that are not equal to given value."""
  pullRequestURL_not: String

  """All values that are contained in given list."""
  pullRequestURL_in: [String!]

  """All values that are not contained in given list."""
  pullRequestURL_not_in: [String!]

  """All values less than the given value."""
  pullRequestURL_lt: String

  """All values less than or equal the given value."""
  pullRequestURL_lte: String

  """All values greater than the given value."""
  pullRequestURL_gt: String

  """All values greater than or equal the given value."""
  pullRequestURL_gte: String

  """All values containing the given string."""
  pullRequestURL_contains: String

  """All values not containing the given string."""
  pullRequestURL_not_contains: String

  """All values starting with the given string."""
  pullRequestURL_starts_with: String

  """All values not starting with the given string."""
  pullRequestURL_not_starts_with: String

  """All values ending with the given string."""
  pullRequestURL_ends_with: String

  """All values not ending with the given string."""
  pullRequestURL_not_ends_with: String
  state: ClaimState

  """All values that are not equal to given value."""
  state_not: ClaimState

  """All values that are contained in given list."""
  state_in: [ClaimState!]

  """All values that are not contained in given list."""
  state_not_in: [ClaimState!]
  createdBy: UserWhereInput
  bounties_every: BountyWhereInput
  bounties_some: BountyWhereInput
  bounties_none: BountyWhereInput
}

input ClaimWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createBounty(data: BountyCreateInput!): Bounty!
  createClaim(data: ClaimCreateInput!): Claim!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateBounty(data: BountyUpdateInput!, where: BountyWhereUniqueInput!): Bounty
  updateClaim(data: ClaimUpdateInput!, where: ClaimWhereUniqueInput!): Claim
  deleteUser(where: UserWhereUniqueInput!): User
  deleteBounty(where: BountyWhereUniqueInput!): Bounty
  deleteClaim(where: ClaimWhereUniqueInput!): Claim
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertBounty(where: BountyWhereUniqueInput!, create: BountyCreateInput!, update: BountyUpdateInput!): Bounty!
  upsertClaim(where: ClaimWhereUniqueInput!, create: ClaimCreateInput!, update: ClaimUpdateInput!): Claim!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyBounties(data: BountyUpdateInput!, where: BountyWhereInput): BatchPayload!
  updateManyClaims(data: ClaimUpdateInput!, where: ClaimWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyBounties(where: BountyWhereInput): BatchPayload!
  deleteManyClaims(where: ClaimWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  bounties(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bounty]!
  claims(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Claim]!
  user(where: UserWhereUniqueInput!): User
  bounty(where: BountyWhereUniqueInput!): Bounty
  claim(where: ClaimWhereUniqueInput!): Claim
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  bountiesConnection(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BountyConnection!
  claimsConnection(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClaimConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  bounty(where: BountySubscriptionWhereInput): BountySubscriptionPayload
  claim(where: ClaimSubscriptionWhereInput): ClaimSubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  login: String!
  name: String!
  balance: Int
  stripeID: String
  isBanned: Boolean
  createdBounties(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bounty!]
  savedBounties(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bounty!]
  claims(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Claim!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  login: String!
  name: String!
  balance: Int
  stripeID: String
  isBanned: Boolean
  createdBounties: BountyCreateManyWithoutCreatedByInput
  savedBounties: BountyCreateManyWithoutSavedByInput
  claims: ClaimCreateManyWithoutCreatedByInput
}

input UserCreateManyWithoutSavedBountiesInput {
  create: [UserCreateWithoutSavedBountiesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutClaimsInput {
  create: UserCreateWithoutClaimsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedBountiesInput {
  create: UserCreateWithoutCreatedBountiesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClaimsInput {
  login: String!
  name: String!
  balance: Int
  stripeID: String
  isBanned: Boolean
  createdBounties: BountyCreateManyWithoutCreatedByInput
  savedBounties: BountyCreateManyWithoutSavedByInput
}

input UserCreateWithoutCreatedBountiesInput {
  login: String!
  name: String!
  balance: Int
  stripeID: String
  isBanned: Boolean
  savedBounties: BountyCreateManyWithoutSavedByInput
  claims: ClaimCreateManyWithoutCreatedByInput
}

input UserCreateWithoutSavedBountiesInput {
  login: String!
  name: String!
  balance: Int
  stripeID: String
  isBanned: Boolean
  createdBounties: BountyCreateManyWithoutCreatedByInput
  claims: ClaimCreateManyWithoutCreatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  login_ASC
  login_DESC
  name_ASC
  name_DESC
  balance_ASC
  balance_DESC
  stripeID_ASC
  stripeID_DESC
  isBanned_ASC
  isBanned_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  login: String!
  name: String!
  balance: Int
  stripeID: String
  isBanned: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  login: String
  name: String
  balance: Int
  stripeID: String
  isBanned: Boolean
  createdBounties: BountyUpdateManyWithoutCreatedByInput
  savedBounties: BountyUpdateManyWithoutSavedByInput
  claims: ClaimUpdateManyWithoutCreatedByInput
}

input UserUpdateManyWithoutSavedBountiesInput {
  create: [UserCreateWithoutSavedBountiesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSavedBountiesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSavedBountiesInput!]
}

input UserUpdateOneRequiredWithoutClaimsInput {
  create: UserCreateWithoutClaimsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutClaimsDataInput
  upsert: UserUpsertWithoutClaimsInput
}

input UserUpdateOneRequiredWithoutCreatedBountiesInput {
  create: UserCreateWithoutCreatedBountiesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCreatedBountiesDataInput
  upsert: UserUpsertWithoutCreatedBountiesInput
}

input UserUpdateWithoutClaimsDataInput {
  login: String
  name: String
  balance: Int
  stripeID: String
  isBanned: Boolean
  createdBounties: BountyUpdateManyWithoutCreatedByInput
  savedBounties: BountyUpdateManyWithoutSavedByInput
}

input UserUpdateWithoutCreatedBountiesDataInput {
  login: String
  name: String
  balance: Int
  stripeID: String
  isBanned: Boolean
  savedBounties: BountyUpdateManyWithoutSavedByInput
  claims: ClaimUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutSavedBountiesDataInput {
  login: String
  name: String
  balance: Int
  stripeID: String
  isBanned: Boolean
  createdBounties: BountyUpdateManyWithoutCreatedByInput
  claims: ClaimUpdateManyWithoutCreatedByInput
}

input UserUpdateWithWhereUniqueWithoutSavedBountiesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSavedBountiesDataInput!
}

input UserUpsertWithoutClaimsInput {
  update: UserUpdateWithoutClaimsDataInput!
  create: UserCreateWithoutClaimsInput!
}

input UserUpsertWithoutCreatedBountiesInput {
  update: UserUpdateWithoutCreatedBountiesDataInput!
  create: UserCreateWithoutCreatedBountiesInput!
}

input UserUpsertWithWhereUniqueWithoutSavedBountiesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSavedBountiesDataInput!
  create: UserCreateWithoutSavedBountiesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  login: String

  """All values that are not equal to given value."""
  login_not: String

  """All values that are contained in given list."""
  login_in: [String!]

  """All values that are not contained in given list."""
  login_not_in: [String!]

  """All values less than the given value."""
  login_lt: String

  """All values less than or equal the given value."""
  login_lte: String

  """All values greater than the given value."""
  login_gt: String

  """All values greater than or equal the given value."""
  login_gte: String

  """All values containing the given string."""
  login_contains: String

  """All values not containing the given string."""
  login_not_contains: String

  """All values starting with the given string."""
  login_starts_with: String

  """All values not starting with the given string."""
  login_not_starts_with: String

  """All values ending with the given string."""
  login_ends_with: String

  """All values not ending with the given string."""
  login_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  balance: Int

  """All values that are not equal to given value."""
  balance_not: Int

  """All values that are contained in given list."""
  balance_in: [Int!]

  """All values that are not contained in given list."""
  balance_not_in: [Int!]

  """All values less than the given value."""
  balance_lt: Int

  """All values less than or equal the given value."""
  balance_lte: Int

  """All values greater than the given value."""
  balance_gt: Int

  """All values greater than or equal the given value."""
  balance_gte: Int
  stripeID: String

  """All values that are not equal to given value."""
  stripeID_not: String

  """All values that are contained in given list."""
  stripeID_in: [String!]

  """All values that are not contained in given list."""
  stripeID_not_in: [String!]

  """All values less than the given value."""
  stripeID_lt: String

  """All values less than or equal the given value."""
  stripeID_lte: String

  """All values greater than the given value."""
  stripeID_gt: String

  """All values greater than or equal the given value."""
  stripeID_gte: String

  """All values containing the given string."""
  stripeID_contains: String

  """All values not containing the given string."""
  stripeID_not_contains: String

  """All values starting with the given string."""
  stripeID_starts_with: String

  """All values not starting with the given string."""
  stripeID_not_starts_with: String

  """All values ending with the given string."""
  stripeID_ends_with: String

  """All values not ending with the given string."""
  stripeID_not_ends_with: String
  isBanned: Boolean

  """All values that are not equal to given value."""
  isBanned_not: Boolean
  createdBounties_every: BountyWhereInput
  createdBounties_some: BountyWhereInput
  createdBounties_none: BountyWhereInput
  savedBounties_every: BountyWhereInput
  savedBounties_some: BountyWhereInput
  savedBounties_none: BountyWhereInput
  claims_every: ClaimWhereInput
  claims_some: ClaimWhereInput
  claims_none: ClaimWhereInput
}

input UserWhereUniqueInput {
  id: ID
  login: String
}
