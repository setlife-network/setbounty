type AggregateBounty {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bounty {
  id: ID!
  createdAt: DateTime!
  createdBy: User!
  expirationDate: DateTime!
  amount: Int!
  issueNumber: Int!
  repository: String!
  status: BountyState!
  saves(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type BountyConnection {
  pageInfo: PageInfo!
  edges: [BountyEdge]!
  aggregate: AggregateBounty!
}

input BountyCreateInput {
  createdBy: UserCreateOneWithoutPostedBountiesInput!
  expirationDate: DateTime!
  amount: Int!
  issueNumber: Int!
  repository: String!
  status: BountyState
  saves: UserCreateManyWithoutSavedBountiesInput
}

input BountyCreateManyWithoutCreatedByInput {
  create: [BountyCreateWithoutCreatedByInput!]
  connect: [BountyWhereUniqueInput!]
}

input BountyCreateManyWithoutSavesInput {
  create: [BountyCreateWithoutSavesInput!]
  connect: [BountyWhereUniqueInput!]
}

input BountyCreateWithoutCreatedByInput {
  expirationDate: DateTime!
  amount: Int!
  issueNumber: Int!
  repository: String!
  status: BountyState
  saves: UserCreateManyWithoutSavedBountiesInput
}

input BountyCreateWithoutSavesInput {
  createdBy: UserCreateOneWithoutPostedBountiesInput!
  expirationDate: DateTime!
  amount: Int!
  issueNumber: Int!
  repository: String!
  status: BountyState
}

type BountyEdge {
  node: Bounty!
  cursor: String!
}

enum BountyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  expirationDate_ASC
  expirationDate_DESC
  amount_ASC
  amount_DESC
  issueNumber_ASC
  issueNumber_DESC
  repository_ASC
  repository_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BountyPreviousValues {
  id: ID!
  createdAt: DateTime!
  expirationDate: DateTime!
  amount: Int!
  issueNumber: Int!
  repository: String!
  status: BountyState!
}

enum BountyState {
  OPENED
  PENDING
  CLOSED
}

type BountySubscriptionPayload {
  mutation: MutationType!
  node: Bounty
  updatedFields: [String!]
  previousValues: BountyPreviousValues
}

input BountySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BountyWhereInput
  AND: [BountySubscriptionWhereInput!]
  OR: [BountySubscriptionWhereInput!]
  NOT: [BountySubscriptionWhereInput!]
}

input BountyUpdateInput {
  createdBy: UserUpdateOneRequiredWithoutPostedBountiesInput
  expirationDate: DateTime
  amount: Int
  issueNumber: Int
  repository: String
  status: BountyState
  saves: UserUpdateManyWithoutSavedBountiesInput
}

input BountyUpdateManyWithoutCreatedByInput {
  create: [BountyCreateWithoutCreatedByInput!]
  delete: [BountyWhereUniqueInput!]
  connect: [BountyWhereUniqueInput!]
  disconnect: [BountyWhereUniqueInput!]
  update: [BountyUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [BountyUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input BountyUpdateManyWithoutSavesInput {
  create: [BountyCreateWithoutSavesInput!]
  delete: [BountyWhereUniqueInput!]
  connect: [BountyWhereUniqueInput!]
  disconnect: [BountyWhereUniqueInput!]
  update: [BountyUpdateWithWhereUniqueWithoutSavesInput!]
  upsert: [BountyUpsertWithWhereUniqueWithoutSavesInput!]
}

input BountyUpdateWithoutCreatedByDataInput {
  expirationDate: DateTime
  amount: Int
  issueNumber: Int
  repository: String
  status: BountyState
  saves: UserUpdateManyWithoutSavedBountiesInput
}

input BountyUpdateWithoutSavesDataInput {
  createdBy: UserUpdateOneRequiredWithoutPostedBountiesInput
  expirationDate: DateTime
  amount: Int
  issueNumber: Int
  repository: String
  status: BountyState
}

input BountyUpdateWithWhereUniqueWithoutCreatedByInput {
  where: BountyWhereUniqueInput!
  data: BountyUpdateWithoutCreatedByDataInput!
}

input BountyUpdateWithWhereUniqueWithoutSavesInput {
  where: BountyWhereUniqueInput!
  data: BountyUpdateWithoutSavesDataInput!
}

input BountyUpsertWithWhereUniqueWithoutCreatedByInput {
  where: BountyWhereUniqueInput!
  update: BountyUpdateWithoutCreatedByDataInput!
  create: BountyCreateWithoutCreatedByInput!
}

input BountyUpsertWithWhereUniqueWithoutSavesInput {
  where: BountyWhereUniqueInput!
  update: BountyUpdateWithoutSavesDataInput!
  create: BountyCreateWithoutSavesInput!
}

input BountyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  expirationDate: DateTime
  expirationDate_not: DateTime
  expirationDate_in: [DateTime!]
  expirationDate_not_in: [DateTime!]
  expirationDate_lt: DateTime
  expirationDate_lte: DateTime
  expirationDate_gt: DateTime
  expirationDate_gte: DateTime
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  issueNumber: Int
  issueNumber_not: Int
  issueNumber_in: [Int!]
  issueNumber_not_in: [Int!]
  issueNumber_lt: Int
  issueNumber_lte: Int
  issueNumber_gt: Int
  issueNumber_gte: Int
  repository: String
  repository_not: String
  repository_in: [String!]
  repository_not_in: [String!]
  repository_lt: String
  repository_lte: String
  repository_gt: String
  repository_gte: String
  repository_contains: String
  repository_not_contains: String
  repository_starts_with: String
  repository_not_starts_with: String
  repository_ends_with: String
  repository_not_ends_with: String
  status: BountyState
  status_not: BountyState
  status_in: [BountyState!]
  status_not_in: [BountyState!]
  saves_every: UserWhereInput
  saves_some: UserWhereInput
  saves_none: UserWhereInput
  AND: [BountyWhereInput!]
  OR: [BountyWhereInput!]
  NOT: [BountyWhereInput!]
}

input BountyWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBounty(data: BountyCreateInput!): Bounty!
  updateBounty(data: BountyUpdateInput!, where: BountyWhereUniqueInput!): Bounty
  updateManyBounties(data: BountyUpdateInput!, where: BountyWhereInput): BatchPayload!
  upsertBounty(where: BountyWhereUniqueInput!, create: BountyCreateInput!, update: BountyUpdateInput!): Bounty!
  deleteBounty(where: BountyWhereUniqueInput!): Bounty
  deleteManyBounties(where: BountyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  bounty(where: BountyWhereUniqueInput!): Bounty
  bounties(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bounty]!
  bountiesConnection(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BountyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  bounty(where: BountySubscriptionWhereInput): BountySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  username: String!
  name: String!
  balance: Int
  stripeID: String
  postedBounties(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bounty!]
  savedBounties(where: BountyWhereInput, orderBy: BountyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bounty!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  name: String!
  balance: Int
  stripeID: String
  postedBounties: BountyCreateManyWithoutCreatedByInput
  savedBounties: BountyCreateManyWithoutSavesInput
}

input UserCreateManyWithoutSavedBountiesInput {
  create: [UserCreateWithoutSavedBountiesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutPostedBountiesInput {
  create: UserCreateWithoutPostedBountiesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostedBountiesInput {
  username: String!
  name: String!
  balance: Int
  stripeID: String
  savedBounties: BountyCreateManyWithoutSavesInput
}

input UserCreateWithoutSavedBountiesInput {
  username: String!
  name: String!
  balance: Int
  stripeID: String
  postedBounties: BountyCreateManyWithoutCreatedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  balance_ASC
  balance_DESC
  stripeID_ASC
  stripeID_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  username: String!
  name: String!
  balance: Int
  stripeID: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  name: String
  balance: Int
  stripeID: String
  postedBounties: BountyUpdateManyWithoutCreatedByInput
  savedBounties: BountyUpdateManyWithoutSavesInput
}

input UserUpdateManyWithoutSavedBountiesInput {
  create: [UserCreateWithoutSavedBountiesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSavedBountiesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSavedBountiesInput!]
}

input UserUpdateOneRequiredWithoutPostedBountiesInput {
  create: UserCreateWithoutPostedBountiesInput
  update: UserUpdateWithoutPostedBountiesDataInput
  upsert: UserUpsertWithoutPostedBountiesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostedBountiesDataInput {
  username: String
  name: String
  balance: Int
  stripeID: String
  savedBounties: BountyUpdateManyWithoutSavesInput
}

input UserUpdateWithoutSavedBountiesDataInput {
  username: String
  name: String
  balance: Int
  stripeID: String
  postedBounties: BountyUpdateManyWithoutCreatedByInput
}

input UserUpdateWithWhereUniqueWithoutSavedBountiesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSavedBountiesDataInput!
}

input UserUpsertWithoutPostedBountiesInput {
  update: UserUpdateWithoutPostedBountiesDataInput!
  create: UserCreateWithoutPostedBountiesInput!
}

input UserUpsertWithWhereUniqueWithoutSavedBountiesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSavedBountiesDataInput!
  create: UserCreateWithoutSavedBountiesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  balance: Int
  balance_not: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  balance_lt: Int
  balance_lte: Int
  balance_gt: Int
  balance_gte: Int
  stripeID: String
  stripeID_not: String
  stripeID_in: [String!]
  stripeID_not_in: [String!]
  stripeID_lt: String
  stripeID_lte: String
  stripeID_gt: String
  stripeID_gte: String
  stripeID_contains: String
  stripeID_not_contains: String
  stripeID_starts_with: String
  stripeID_not_starts_with: String
  stripeID_ends_with: String
  stripeID_not_ends_with: String
  postedBounties_every: BountyWhereInput
  postedBounties_some: BountyWhereInput
  postedBounties_none: BountyWhereInput
  savedBounties_every: BountyWhereInput
  savedBounties_some: BountyWhereInput
  savedBounties_none: BountyWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
